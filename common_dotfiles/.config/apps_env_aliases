# vim: ft=sh:fdm=marker:fdl=3
# shellcheck shell=bash disable=SC1091,SC2034

export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

# ============ Aliases ============ {{{2

# Alacritty.
[ -f "$HOME/.config/alacritty/alacritty.toml" ] \
  && alias alacritty-theme-dark='sed -i "s#\(.\+/themes/\)[^.]\+\([.]toml\)#\1everforest_dark_hard\2#; s#^opacity =.\+\$#opacity = 0.95#" $HOME/.config/alacritty/alacritty.toml && unset theme' \
  && alias alacritty-theme-light='sed -i "s#\(.\+/themes/\)[^.]\+\([.]toml\)#\1rose-pine-dawn\2#; s#^opacity =.\+\$#opacity = 1.0#" $HOME/.config/alacritty/alacritty.toml && export theme=light'

# golang.
command -v go >/dev/null \
  && alias go-mod-example='go mod init example.com/m'

# Python.
alias py-venv-create='{ [ -d ./venv ] && echo "./venv already exists." ; } || { python -m venv venv && echo "Virtual environment created. Use \`source ./venv/bin/activate\` to activate." ; }'
alias ae='deactivate >/dev/null 2>&1; . ./venv/bin/activate && echo "venv activated"'
alias de='deactivate'

# R.
command -v R >/dev/null \
  && alias r='R --no-save --no-restore'

# podman.
# command -v podman >/dev/null \
#   && alias docker='podman' \
#   && alias odocker='command docker'

# microk8s.
command -v microk8s >/dev/null \
  && alias kubectl='microk8s kubectl' \
  && alias helm='microk8s helm3'

# minikube.
command -v minikube >/dev/null \
  && alias kubectl="minikube kubectl --" \
  && alias minikube-push-docker='eval $(minikube docker-env 2>/dev/null)' \
  && alias minikube-push-podman='eval $(minikube podman-env 2>/dev/null)'

# kubectl.
command -v kubectl >/dev/null \
  && alias k='kubectl' && complete -o default -F __start_kubectl k \
  && alias kubens='kubectl config set-context --current --namespace '

# typora.
[ -x "/Applications/Typora.app/Contents/MacOS/Typora" ] \
  && alias typora="/Applications/Typora.app/Contents/MacOS/Typora"

# subl + pipenv virtualenv.
command -v pipenv >/dev/null && command -v subl >/dev/null \
  && alias subl-pipenv='pipenv --venv && pipenv run subl'

# pipenv.
command -v pipenv >/dev/null \
  && export PIPENV_VENV_IN_PROJECT=1

# youtube-dl.
command -v youtube-dl >/dev/null \
  && alias youtube-dl-mp4='youtube-dl -f "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/mp4"' \
  && alias youtube-dl-best='youtube-dl -f "bestvideo[height<=1080][ext=mp4]+bestaudio/best[height<=720][ext=mp4]"' \
  && alias youtube-dl-m4a='youtube-dl -f bestaudio[ext=m4a] --embed-thumbnail --add-metadata' \
  && alias youtube-dl-list='youtube-dl -ci -o "%(playlist_index)s-%(title)s.%(ext)s" --yes-playlist' \
  && alias youtube-dl-list-mp4='youtube-dl -ci -o "%(playlist_index)s-%(title)s.%(ext)s" -f "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/mp4" --yes-playlist'

# yt-dlp.
# < https://www.reddit.com/r/youtubedl/comments/155whry/comment/jswxtsh/ >
command -v yt-dlp >/dev/null \
  && alias yt-dlp-mp4='yt-dlp -f "bestvideo[height<=1080][vcodec^=avc][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" -S "res:1080,ext:mp4:m4a"' \
  && alias yt-dlp-formats='yt-dlp -F' \
  && alias yt-dlp-m4a='yt-dlp -f "ba" -x --audio-format mpa' \
  && alias yt-dlp-playlist='yt-dlp -f "bestvideo[height<=1080][vcodec^=avc][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" -S "res:1080,ext:mp4:m4a" --yes-playlist -o "%(playlist)s/%(playlist_index)s - %(title)s-%(id)s.%(ext)s" --embed-chapters' \
  2>/dev/null

# Alacritty theme.
(command -v alacritty-colorscheme >/dev/null) \
  && alias light='alacritty-colorscheme -c $HOME/.alacritty.yml -t PaperColor.yaml' \
  && alias dark='alacritty-colorscheme -c $HOME/.alacritty.yml -t gruvbox.yaml' \
  && alias colorlist='alacritty-colorscheme -c $HOME/.alacritty.yml -l' \
  && alias colorapply='alacritty-colorscheme -c $HOME/.alacritty.yml -a'

# tmux.
command -v tmux >/dev/null \
  && alias tm='tmux attach || tmux new'

# tty-clock.
command -v tty-clock >/dev/null \
  && alias clock='tty-clock -sc -f "%a, %d %b %Y %T %Z%z"'

# matrix.
command -v cmatrix >/dev/null \
  && alias matrix='cmatrix'

# The fuck.
command -v thefuck >/dev/null && eval "$(thefuck --alias)"

# glow - A markdown TUI
command -v glow >/dev/null \
  && alias glow="PAGER='less -r' command glow -p"

# R.
command -v R >/dev/null \
  && alias R='R --no-save --no-restore'

# peaclock.
command -v peaclock >/dev/null \
  && alias peaclock="peaclock --config-dir ~/.config/peaclock"

# zoxide.
command -v zoxide >/dev/null \
  && eval "$(zoxide init bash)"

# ============ Apps env ============ {{{2

# ImageMagick.
export DYLD_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_LIBRARY_PATH"

# nnn.
command -v nnn >/dev/null \
  && alias nnn='command nnn -R' \
  && export NNN_FIFO=/tmp/nnn.fifo \
  && export NNN_PLUG='p:preview-tui;f:finder;'

# Astro.
command -v astro >/dev/null && eval "$(astro completion bash 2>/dev/null | sed '0,/# bash completion/d')"

# Poetry.
# https://python-poetry.org/docs/
[ -d "$HOME/.poetry/bin" ] && export PATH="$HOME/.poetry/bin:$PATH"

# R Framework
if [ "$(uname -s)" = "Darwin" ]; then
  [ -d "/Library/Frameworks/R.framework/Resources" ] && export PATH="/Library/Frameworks/R.framework/Resources:$PATH"
fi

if [ "$(uname -s)" = "Darwin" ]; then
  ## for MacOS.
  [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
else
  ## for Linux.
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Go.
__GOROOT="$(go env GOROOT 2>/dev/null)"
[ -d "$__GOROOT" ] \
  && export GOROOT="$__GOROOT" && unset __GOROOT

[ -d /usr/local/go/bin ] \
  && export PATH="$PATH:/usr/local/go/bin"

[ -d /opt/homebrew/opt/go/bin ] \
  && export PATH="$PATH:/opt/homebrew/opt/go/bin"

[ -d "$HOME"/.local/share/go/bin ] \
  && export PATH="$PATH:$HOME/.local/share/go/bin"

# < https://pkg.go.dev/github.com/posener/complete >
# Install: `go install github.com/posener/complete/gocomplete@latest`
[ -x "$HOME"/.local/share/go/bin/gocomplete ] \
  && complete -C "$HOME"/.local/share/go/bin/gocomplete go

# npm.
[ -d "$HOME/.local/share/npm/bin" ] \
  && export PATH="$HOME/.local/share/npm/bin:$PATH"

# ripgrep.
[ -s "$HOME/.config/ripgrep/ripgreprc" ] \
  && export RIPGREP_CONFIG_PATH="$HOME/.config/ripgrep/ripgreprc"

# pyenv.
if shopt -q login_shell && [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=0
fi

if shopt -q login_shell && [ -d "/pyenv/.pyenv" ]; then
  export PYENV_ROOT="/pyenv/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=0
fi

if command -v pyenv >/dev/null; then
  eval "$(pyenv init - --no-rehash)" \
    && eval "$(pyenv virtualenv-init -)"
fi

# SDKMAN.
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
[ -s "$HOMEBREW_PREFIX/opt/sdkman-cli" ] && export SDKMAN_DIR="$HOMEBREW_PREFIX/opt/sdkman-cli/libexec"
[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && source "${SDKMAN_DIR}/bin/sdkman-init.sh"

# jenv.
[ -d "$HOME/.jenv/bin" ] && export PATH="$HOME/.jenv/bin:$PATH"
# very slow < https://github.com/jenv/jenv/issues/178 >
# command -v jenv >/dev/null && eval "$(jenv init -)"

# fzf - Ripgrep solution that shows hidden files but ignore .git folder
if command -v fzf >/dev/null; then
  if command -v rg >/dev/null; then
    export FZF_DEFAULT_COMMAND="rg --files --hidden -g '!.git'"
  else
    export FZF_DEFAULT_COMMAND="find . -type f -not -path '*/\.git/*' -not -regex '.*\(\.pyc\|\.o\|\.obj\|\.svn\|\.swp\|\.class\|\.hg\|\.DS_Store\|\.min\..*\)'"
  fi
fi

# fzf - Fuzzy completion for bash and zsh.
if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf.bash" ]; then
  . "${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf.bash"
elif [ -f "$HOME/.fzf.bash" ]; then
  . "$HOME/.fzf.bash"
fi

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf_config" ] && . "${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf_config"

# Git diff-so-fancy.
# https://github.com/so-fancy/diff-so-fancy
if command -v diff-so-fancy >/dev/null; then
  function gd() {
    git diff --color "$@" | diff-so-fancy | less --tabs=4 -RFX
  }
fi

# homebrew.
[ -d "$HOME"/.dotfiles/homebrew/ ] \
  && alias brew-dump-leaves='brew leaves > "$HOME"/.dotfiles/homebrew/leaves.txt'

# linuxbrew.
[ -x "$HOME/.linuxbrew/bin/brew" ] && eval "$("$HOME/.linuxbrew/bin/brew" shellenv)"
[ -x /home/linuxbrew/.linuxbrew/bin/brew ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# MS-SQL.
export PATH="$PATH:/opt/mssql-tools/bin"

# 1Password - Linote Plugin.
[ -f "${XDG_CONFIG_HOME}"/op/plugins.sh ] \
  && source "${XDG_CONFIG_HOME}"/op/plugins.sh

# ============ Alias for Ubuntu. ============ {{{2

_uname="$(uname -s)"
[ -e "/etc/os-release" ] && _os_name="$(. /etc/os-release; printf "%s\n" "$ID")"

command -v batcat >/dev/null \
  && [ "$_uname" = "Linux" ] \
  && [ -e "/etc/os-release" ] \
  && [ "$_os_name" = "ubuntu" ] \
  && alias bat='batcat'

command -v fdfind >/dev/null \
  && [ "$_uname" = "Linux" ] \
  && [ "$_os_name" = "ubuntu" ] \
  && alias fd='fdfind'

unset _uname
unset _os_name

# ============ Completions ============ {{{2

# pipx.
if command -v register-python-argcomplete >/dev/null && command -v pipx >/dev/null; then
  eval "$(register-python-argcomplete pipx 2>/dev/null)"
fi

# pipenv.
# https://pipenv.pypa.io/en/latest/advanced/#shell-completion
if command -v pipenv >/dev/null; then
  # eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
  _pipenv_completion() {
    local IFS=$'\n'
    local response

    response=$(env COMP_WORDS="${COMP_WORDS[*]}" COMP_CWORD="$COMP_CWORD" _PIPENV_COMPLETE=bash_complete "$1")

    for completion in $response; do
      IFS=',' read -r type value <<< "$completion"

      if [[ $type == 'dir' ]]; then
        COMREPLY=()
        compopt -o dirnames
      elif [[ $type == 'file' ]]; then
        COMREPLY=()
        compopt -o default
      elif [[ $type == 'plain' ]]; then
        COMPREPLY+=("$value")
      fi
    done

    return 0
  }

  _pipenv_completion_setup() {
    complete -o nosort -F _pipenv_completion pipenv
  }

  _pipenv_completion_setup;
fi
