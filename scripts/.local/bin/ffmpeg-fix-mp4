#!/usr/bin/env bash
set -Eeo pipefail

if ! command -v ffmpeg >/dev/null; then
  echo "ffmpeg need to be installed first"
  exit 1
fi

declare OUT_DIR

while getopts ":o:" argv; do
  case "${argv}" in
    o )
      export OUT_DIR=${OPTARG}
      echo "Set output directory: ${OUT_DIR%/}/"
      ;;
    * )
      usage
      ;;
  esac
done
shift $((OPTIND-1))

CURRENT_DIR="$(pwd)"

[ ! -d "${OUT_DIR}" ] \
  && export OUT_DIR="$CURRENT_DIR" \
  && echo "Default output to current directory: ${OUT_DIR%/}"

usage() { echo  "Usage: ${0##*/} [-o <OUTPUT_DIR>] <INPUT_FILE>" 1>&2; exit 1; }

fix_mp4() {

  local fullfile
  local file_name
  local base_name

  fullfile="$1"
  file_name="${fullfile##*/}"
  base_name="${file_name%.*}"

  echo ------------------------------------------------

  if [[ "$file_name" = *_fixed.mp4 ]] || [[ ! "${file_name,,}" =~ \.mp4$ ]] || [[ $(lsof "$fullfile" 2>/dev/null) ]]; then
    echo "Skip file: $fullfile" 1>&2
    return 0
  fi
  echo "Processing file: $fullfile ..."

  if ffmpeg -i "$fullfile" -c copy "${OUT_DIR%/}/${base_name}_fixed.mp4"; then
    rm -f "$fullfile"
    echo "Finished: ${OUT_DIR%/}/${base_name}_fixed.mp4"
  fi
  echo ------------------------------------------------

}

export -f fix_mp4

# function join_by { local IFS="$1"; shift; echo "$*"; }

main() {
  local -a files

  [ $# = 0 ] && usage

  if [ $# -eq 1 ] && [ -d "$1" ]; then
    # Read from files in folder.
    # Store the "find" command results as an array < https://stackoverflow.com/a/23357277 >
    readarray -d '' files < <(find "$1" -maxdepth 1 -type f -name '*.mp4' -print0)
  elif [ -n "$1" ]; then
    # Read from positional argument.
    # https://github.com/koalaman/shellcheck/wiki/SC2124
    files=( "$@" )
  fi

  if [ ${#files[@]} -eq 0 ]; then
    echo "No file input."
    usage
  fi

  # Pass all elements in existing array to xargs < https://stackoverflow.com/a/19453772 >
  printf "%s\0" "${files[@]}" | xargs -0 -P0 -I{} bash -c 'fix_mp4 "$@"' _ {}
  return 0
}

if [ -p /dev/stdin ]; then
  # Pipe Arguments To Bash Function - Read from stdin if file descriptor /dev/stdin is open.
  # < https://www.baeldung.com/linux/pipe-output-to-function >
  # < https://github.com/koalaman/shellcheck/wiki/SC2207 >

  # if STDIN is a terminal then... < https://stackoverflow.com/a/8949099 >
  # Pipe input into a script < https://stackoverflow.com/a/46726373 >
  # Remove ascii color < https://stackoverflow.com/a/18000433 >

  files=()
  while read -r data; do
    files+=( "$(sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' <<<"$data")" )
  done
  main "${files[@]}"
else
  main "$@"
fi
