#!/usr/bin/env bash

# ============ Custom functions ============

# hlsdl.
hlsdl-mp4-nohup() {
  command -v hlsdl-mp4 >/dev/null 2>&1 || { echo "hlsdl-mp4 is not installed. Aborting." >&2; return 1; }
  nohup hlsdl-mp4 "$1" "$2" >/dev/null &
}

mkcd() {
  last=$(eval "echo \$$#")
  if [ -z "$last" ]; then
    echo "Enter a directory name"
  elif [ -d "$last" ]; then
    echo "\"$last\" already exists"
    cd "$last" || return 1
  else
    mkdir -p "$@" && cd "$last" || return 1
  fi
}

gi() { curl -L -s https://www.gitignore.io/api/"$1" ;}

lfcd() {
  tmp="$(mktemp)"
  command -v lf >/dev/null 2>&1 || return 1
  lf -last-dir-path="$tmp" "$0"
  if [ -f "$tmp" ]; then
    dir="$(cat "$tmp")"
    rm -f "$tmp"
    [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "dir" || exit
  fi
}

run_detached() {
    nohup "$@" </dev/null >/dev/null 2>&1 &
    disown
}

gdrive-dl() {
  file_id=$1
  file_name=$2

  # first stage to get the warning html
  curl -c /tmp/cookies \
    "https://drive.google.com/uc?export=download&id=$file_id" > \
    /tmp/intermezzo.html

  # second stage to extract the download link from html above
  download_link=$(cat /tmp/intermezzo.html | \
  grep -Po 'uc-download-link" [^>]* href="\K[^"]*' | \
  sed 's/\&amp;/\&/g')
    curl -L -b /tmp/cookies \
    "https://drive.google.com$download_link" > $file_name
}

tree-gitignore() {
  # https://unix.stackexchange.com/a/291283/184321
  git_ignore_files=("$(git config --get core.excludesfile)" .gitignore ~/.gitignore)
  ignore_pattern="$(grep -hvE '^$|^#' "${git_ignore_files[@]}" 2>/dev/null|sed 's:/$::'|tr '\n' '\|')"
  if git status &> /dev/null && [[ -n "${ignore_pattern}" ]]; then
    tree -I "${ignore_pattern}" "${@}"
  else
    tree "${@}"
  fi
}

## ex - archive extractor.
## usage: ex <file>
ex() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

color () {
    # echo ""
    #black
    echo -e "\e[0;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 01 0;30m"
    #red
    echo -e "\e[0;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 02 0;31m"
    #green
    echo -e "\e[0;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 03 0;32m"
    #yellow
    echo -e "\e[0;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 04 0;33m"
    #blue
    echo -e "\e[0;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 05 0;34m"
    #purple
    echo -e "\e[0;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 06 0;35m"
    #cyan
    echo -e "\e[0;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 07 0;36m"
    #white
    echo -e "\e[0;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 08 0;37m"
    echo ""
    #black
    echo -e "\e[1;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 09 1;30m"
    #red
    echo -e "\e[1;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 10 1;31m"
    #green
    echo -e "\e[1;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 11 1;32m"
    #yellow
    echo -e "\e[1;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 12 1;33m"
    #blue
    echo -e "\e[1;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 13 1;34m"
    #purple
    echo -e "\e[1;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 14 1;35m"
    #cyan
    echo -e "\e[1;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 15 1;36m"
    #white
    echo -e "\e[1;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 16 1;37m"
    echo ""
    echo -e "\e[0;30m█████\\e[0m\e[0;31m█████\\e[0m\e[0;32m█████\\e[0m\e[0;33m█████\\e[0m\e[0;34m█████\\e[0m\e[0;35m█████\\e[0m\e[0;36m█████\\e[0m\e[0;37m█████\\e[0m"
    echo -e "\e[0m\e[1;30m█████\\e[0m\e[1;31m█████\\e[0m\e[1;32m█████\\e[0m\e[1;33m█████\\e[0m\e[1;34m█████\\e[0m\e[1;35m█████\\e[0m\e[1;36m█████\\e[0m\e[1;37m█████\\e[0m"
}

# Count code lines in some directory.
# https://github.com/paulmillr/dotfiles/blob/master/home/.zshrc.sh
# $ loc py js css
# # => Lines of code for .py: 3781
# # => Lines of code for .js: 3354
# # => Lines of code for .css: 2970
# # => Total lines of code: 10105
loc() {
  local total
  local firstletter
  local ext
  local lines
  total=0
  for ext in "$@"; do
    firstletter=$(echo $ext | cut -c1-1)
    if [[ firstletter != "." ]]; then
      ext=".$ext"
    fi
    lines=`find-exec "*$ext" cat | wc -l`
    lines=${lines// /}
    total=$(($total + $lines))
    echo "Lines of code for ${fg[blue]}$ext${reset_color}: ${fg[green]}$lines${reset_color}"
  done
  echo "${fg[blue]}Total${reset_color} lines of code: ${fg[green]}$total${reset_color}"
}

_calcram() {
  local sum
  sum=0
  for i in `ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'`; do
    sum=$(($i + $sum))
  done
  sum=$(echo "scale=2; $sum / 1024.0" | bc)
  echo $sum
}

# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM
ram() {
  local sum
  local app="$1"
  if [ -z "$app" ]; then
    echo "First argument - pattern to grep from processes"
    return 0
  fi

  sum=$(_calcram $app)
  if [[ $sum != "0" ]]; then
    echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
  else
    echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
  fi
}

# Same, but tracks RAM usage in realtime. Will run until you stop it.
# $ rams safari
rams() {
  local sum
  local app="$1"
  if [ -z "$app" ]; then
    echo "First argument - pattern to grep from processes"
    return 0
  fi

  while true; do
    sum=$(_calcram $app)
    if [[ $sum != "0" ]]; then
      echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
    else
      echo -en "No active processes matching pattern '${fg[blue]}${app}${reset_color}'\r"
    fi
    sleep 1
  done
}

# $ size dir1 file2.js
size() {
  # du -scBM | sort -n
  du -shck "$@" | sort -rn | awk '
      function human(x) {
          s="kMGTEPYZ";
          while (x>=1000 && length(s)>1)
              {x/=1024; s=substr(s,2)}
          return int(x+0.5) substr(s,1,1)
      }
      {gsub(/^[0-9]+/, human($1)); print}'
}


tweet-to-gif() {
  if command -v youtube-dl &>/dev/null; then
    youtube-dl -o - "$1" | ffmpeg -i pipe: \
      -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" \
      -hide_banner -loglevel panic \
      -f gif "${1##*/}.gif"
  fi
}


gsw() {
  if command -v fzf >/dev/null; then
    git switch "$(git branch | grep -v '[*]' | fzf | tr -d '[:space:]')"
  else
    echo "fzf not installed."
  fi
}

#function ffmpeg-fix-mp4() {
#  usage() { echo  "Usage: $0 [-o <OUTPUT_DIR>] <INPUT_FILE>" 1>&2; exit 1; }
#
#  local out_dir
#  local OPTIND o argv
#  # You also need to make sure that ${OPTIND} is local to the function by
#  # either unsetting it or declaring it local.
#  # https://stackoverflow.com/a/16655341/3744499
#
#  while getopts ":o:" argv; do
#    case "${argv}" in
#      o )
#        local out_dir=${OPTARG}
#        echo "Set output directory: ${out_dir%/}/"
#        ;;
#      * )
#        usage
#        ;;
#    esac
#  done
#  shift $((OPTIND-1))
#
#  local files=("$@")
#
#  for fullfile in "${files[@]}"; do
#    local file_name=$(basename -- "$fullfile")
#    local file_name="${file_name%.*}"
#
#    local current_dir="$(pwd)"
#
#    [ -z "${out_dir}" ] && out_dir="$current_dir" && echo "Default output to current directory: ${out_dir%/}/"
#    [ -z "${out_dir}" ] && usage
#
#    echo ------------------------------------------------
#
#    if [[ "$fullfile" = *_fixed.mp4 ]] || [[ $(lsof "$fullfile") ]]; then
#      echo "Skip file: $fullfile" 1>&2
#      continue
#    fi
#    echo "Processing file: $fullfile ..."
#
#    if ffmpeg -i "$fullfile" -c copy "${out_dir%/}/${file_name}_fixed.mp4"; then
#      rm -f "$fullfile"
#      echo "Finished: ${out_dir%/}/${file_name}_fixed.mp4"
#    fi
#    echo ------------------------------------------------
#
#  done
#}
